# def heuristic_function(hole_card, community_card):
#     """
#     Generates a heuristic value based on the agent's hole card and the community cards
#     on the table. This value is used in the MCTSPlayerModel to make decisions based on how
#     well the player is likely to do against its opponents.
#     """
#     hole_cards = [Card.from_str(card) for card in hole_card]
#     comm_cards = [Card.from_str(card) for card in community_card]
#     available_cards = get_available_cards(hole_cards, comm_cards)
#     ev_opponents = expected_value_of_opponents(available_cards, comm_cards)
#     value = HandEvaluator.eval_hand(hole_cards, comm_cards) / ev_opponents
#     return value


# def get_available_cards(hole_card, community_card):
#     """
#     Given the hole cards (agent's hand) and the community cards on the table,
#     determine what cards are still available and return that list.
#     """
#     available_cards = []
#     for suit in Card.SUIT_MAP.keys():
#         for rank in Card.RANK_MAP.keys():
#             possible_card = Card(suit, rank)
#             if possible_card not in hole_card and possible_card not in community_card:
#                 available_cards.append(possible_card)
#     return available_cards


# def expected_value_of_opponents(available_cards, community_card, depth=10):
#     expected_value = 0
#     hand_len = 2
#     total_combinations = combination(len(available_cards), hand_len)
#     for first_card_index in range(min(len(available_cards), depth)):
#         if first_card_index != (len(available_cards) - 1):
#             for second_card_index in range(first_card_index + 1, len(available_cards)):
#                 hole_card = [available_cards[first_card_index], available_cards[second_card_index]]
#                 expected_value += HandEvaluator.eval_hand(hole_card, community_card) / total_combinations
#     return expected_value